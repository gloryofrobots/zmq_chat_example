// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zchat_message.proto

#ifndef PROTOBUF_zchat_5fmessage_2eproto__INCLUDED
#define PROTOBUF_zchat_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zchat_5fmessage_2eproto();
void protobuf_AssignDesc_zchat_5fmessage_2eproto();
void protobuf_ShutdownFile_zchat_5fmessage_2eproto();

class zchat_message;

enum zchat_message_message_type {
  zchat_message_message_type_PING = 1,
  zchat_message_message_type_PONG = 2,
  zchat_message_message_type_MESSAGE = 3
};
bool zchat_message_message_type_IsValid(int value);
const zchat_message_message_type zchat_message_message_type_message_type_MIN = zchat_message_message_type_PING;
const zchat_message_message_type zchat_message_message_type_message_type_MAX = zchat_message_message_type_MESSAGE;
const int zchat_message_message_type_message_type_ARRAYSIZE = zchat_message_message_type_message_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* zchat_message_message_type_descriptor();
inline const ::std::string& zchat_message_message_type_Name(zchat_message_message_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    zchat_message_message_type_descriptor(), value);
}
inline bool zchat_message_message_type_Parse(
    const ::std::string& name, zchat_message_message_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<zchat_message_message_type>(
    zchat_message_message_type_descriptor(), name, value);
}
// ===================================================================

class zchat_message : public ::google::protobuf::Message {
 public:
  zchat_message();
  virtual ~zchat_message();
  
  zchat_message(const zchat_message& from);
  
  inline zchat_message& operator=(const zchat_message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const zchat_message& default_instance();
  
  void Swap(zchat_message* other);
  
  // implements Message ----------------------------------------------
  
  zchat_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zchat_message& from);
  void MergeFrom(const zchat_message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef zchat_message_message_type message_type;
  static const message_type PING = zchat_message_message_type_PING;
  static const message_type PONG = zchat_message_message_type_PONG;
  static const message_type MESSAGE = zchat_message_message_type_MESSAGE;
  static inline bool message_type_IsValid(int value) {
    return zchat_message_message_type_IsValid(value);
  }
  static const message_type message_type_MIN =
    zchat_message_message_type_message_type_MIN;
  static const message_type message_type_MAX =
    zchat_message_message_type_message_type_MAX;
  static const int message_type_ARRAYSIZE =
    zchat_message_message_type_message_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  message_type_descriptor() {
    return zchat_message_message_type_descriptor();
  }
  static inline const ::std::string& message_type_Name(message_type value) {
    return zchat_message_message_type_Name(value);
  }
  static inline bool message_type_Parse(const ::std::string& name,
      message_type* value) {
    return zchat_message_message_type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .zchat_message.message_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::zchat_message_message_type type() const;
  inline void set_type(::zchat_message_message_type value);
  
  // required int32 incoming_id = 2;
  inline bool has_incoming_id() const;
  inline void clear_incoming_id();
  static const int kIncomingIdFieldNumber = 2;
  inline ::google::protobuf::int32 incoming_id() const;
  inline void set_incoming_id(::google::protobuf::int32 value);
  
  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional string sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  
  // repeated string receiver = 5;
  inline int receiver_size() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  inline const ::std::string& receiver(int index) const;
  inline ::std::string* mutable_receiver(int index);
  inline void set_receiver(int index, const ::std::string& value);
  inline void set_receiver(int index, const char* value);
  inline void set_receiver(int index, const char* value, size_t size);
  inline ::std::string* add_receiver();
  inline void add_receiver(const ::std::string& value);
  inline void add_receiver(const char* value);
  inline void add_receiver(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& receiver() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_receiver();
  
  // repeated string users = 6;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 6;
  inline const ::std::string& users(int index) const;
  inline ::std::string* mutable_users(int index);
  inline void set_users(int index, const ::std::string& value);
  inline void set_users(int index, const char* value);
  inline void set_users(int index, const char* value, size_t size);
  inline ::std::string* add_users();
  inline void add_users(const ::std::string& value);
  inline void add_users(const char* value);
  inline void add_users(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();
  
  // @@protoc_insertion_point(class_scope:zchat_message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_incoming_id();
  inline void clear_has_incoming_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_sender();
  inline void clear_has_sender();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 incoming_id_;
  ::std::string* value_;
  ::std::string* sender_;
  ::google::protobuf::RepeatedPtrField< ::std::string> receiver_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_zchat_5fmessage_2eproto();
  friend void protobuf_AssignDesc_zchat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_zchat_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static zchat_message* default_instance_;
};
// ===================================================================


// ===================================================================

// zchat_message

// required .zchat_message.message_type type = 1;
inline bool zchat_message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zchat_message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zchat_message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zchat_message::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::zchat_message_message_type zchat_message::type() const {
  return static_cast< ::zchat_message_message_type >(type_);
}
inline void zchat_message::set_type(::zchat_message_message_type value) {
  GOOGLE_DCHECK(::zchat_message_message_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 incoming_id = 2;
inline bool zchat_message::has_incoming_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zchat_message::set_has_incoming_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zchat_message::clear_has_incoming_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zchat_message::clear_incoming_id() {
  incoming_id_ = 0;
  clear_has_incoming_id();
}
inline ::google::protobuf::int32 zchat_message::incoming_id() const {
  return incoming_id_;
}
inline void zchat_message::set_incoming_id(::google::protobuf::int32 value) {
  set_has_incoming_id();
  incoming_id_ = value;
}

// optional string value = 3;
inline bool zchat_message::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void zchat_message::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void zchat_message::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void zchat_message::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& zchat_message::value() const {
  return *value_;
}
inline void zchat_message::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void zchat_message::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void zchat_message::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zchat_message::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* zchat_message::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sender = 4;
inline bool zchat_message::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void zchat_message::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void zchat_message::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void zchat_message::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& zchat_message::sender() const {
  return *sender_;
}
inline void zchat_message::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void zchat_message::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void zchat_message::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zchat_message::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* zchat_message::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string receiver = 5;
inline int zchat_message::receiver_size() const {
  return receiver_.size();
}
inline void zchat_message::clear_receiver() {
  receiver_.Clear();
}
inline const ::std::string& zchat_message::receiver(int index) const {
  return receiver_.Get(index);
}
inline ::std::string* zchat_message::mutable_receiver(int index) {
  return receiver_.Mutable(index);
}
inline void zchat_message::set_receiver(int index, const ::std::string& value) {
  receiver_.Mutable(index)->assign(value);
}
inline void zchat_message::set_receiver(int index, const char* value) {
  receiver_.Mutable(index)->assign(value);
}
inline void zchat_message::set_receiver(int index, const char* value, size_t size) {
  receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zchat_message::add_receiver() {
  return receiver_.Add();
}
inline void zchat_message::add_receiver(const ::std::string& value) {
  receiver_.Add()->assign(value);
}
inline void zchat_message::add_receiver(const char* value) {
  receiver_.Add()->assign(value);
}
inline void zchat_message::add_receiver(const char* value, size_t size) {
  receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
zchat_message::receiver() const {
  return receiver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
zchat_message::mutable_receiver() {
  return &receiver_;
}

// repeated string users = 6;
inline int zchat_message::users_size() const {
  return users_.size();
}
inline void zchat_message::clear_users() {
  users_.Clear();
}
inline const ::std::string& zchat_message::users(int index) const {
  return users_.Get(index);
}
inline ::std::string* zchat_message::mutable_users(int index) {
  return users_.Mutable(index);
}
inline void zchat_message::set_users(int index, const ::std::string& value) {
  users_.Mutable(index)->assign(value);
}
inline void zchat_message::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
}
inline void zchat_message::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zchat_message::add_users() {
  return users_.Add();
}
inline void zchat_message::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
}
inline void zchat_message::add_users(const char* value) {
  users_.Add()->assign(value);
}
inline void zchat_message::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
zchat_message::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
zchat_message::mutable_users() {
  return &users_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zchat_message_message_type>() {
  return ::zchat_message_message_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zchat_5fmessage_2eproto__INCLUDED
